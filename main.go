package main

import (
	"fmt"
	"strings"

	"gopkg.in/yaml.v3"
)

type AutoGenerated struct {
	Name        string `yaml:"name"`
	Description string `yaml:"description"`
	Inputs      struct {
		AllowedTypes struct {
			Description string `yaml:"description"`
			Default     string `yaml:"default"`
		} `yaml:"allowed_types"`
		Description struct {
			Description string `yaml:"description"`
			Default     string `yaml:"default"`
		} `yaml:"description"`
		RequireScope struct {
			Description string `yaml:"description"`
			Default     string `yaml:"default"`
		} `yaml:"require_scope"`
		Scope struct {
			Description string `yaml:"description"`
			Default     string `yaml:"default"`
		} `yaml:"scope"`
	} `yaml:"inputs"`
	Runs struct {
		Using string `yaml:"using"`
		Image string `yaml:"image"`
	} `yaml:"runs"`
}

var cfg = `---
name: "Conventional Commit"
description: "Validate PR title according to conventional commit spec"
inputs:
  allowed_types:
    description: Allowed commit types
    default: |
      build
      chore
      ci
      docs
      feat
      fix
      perf
      refactor
      revert
      style
      test
  description:
    description: Regular expression to validate description
    default: ([\w ]+)
  require_scope:
    description: Make scope requires (boolean)
    default: "false"
  scope:
    description: Regular expression to validate scope. Only used when require scope is true or when scope is provided.
    default: (\w)
runs:
  using: "docker"
  image: "docker://ghcr.io/lab42/conventional-commit:latest"
`

func main() {
	var c AutoGenerated
	yaml.Unmarshal([]byte(cfg), &c)
	fmt.Println(c.Inputs.AllowedTypes.Default)
	fmt.Println(
		strings.Join(strings.Split(strings.TrimRight(c.Inputs.AllowedTypes.Default, "\n"), "\n"), "|"),
	)
	// cmd.Execute()
}
